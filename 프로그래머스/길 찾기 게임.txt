#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

vector<int> pre, post;

struct Node {
	int x, y, idx;
	Node *left = NULL;
	Node *right = NULL;
};

bool cmp(Node &a, Node &b) {
	return a.y == b.y ? a.x < b.x : a.y > b.y;
}

void addNode(Node *parent, Node *child) {
	if (child->x < parent->x) {
		if (parent->left == NULL) parent->left = child;
		else addNode(parent->left, child);
	}
	else {
		if (parent->right == NULL) parent->right = child;
		else addNode(parent->right, child);
	}
}

void preorder(Node *parent) {
	if (parent != NULL) {
		pre.push_back(parent->idx);
		preorder(parent->left);
		preorder(parent->right);
	}
}

void postorder(Node *parent) {
	if (parent != NULL) {
		postorder(parent->left);
		postorder(parent->right);
		post.push_back(parent->idx);
	}
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
	vector<Node> v;
	int size = nodeinfo.size();
	for (int i = 0; i < size; i++) {
		Node t;
		t.x = nodeinfo[i][0];
		t.y = nodeinfo[i][1];
		t.idx = i + 1;
		v.push_back(t);
	}
	sort(v.begin(), v.end(), cmp);

	Node *root = &v[0];
	for (int i = 1; i < size; i++) {
		addNode(root, &v[i]);
	}
	preorder(root);
	postorder(root);

	vector<vector<int>> ans;
	ans.push_back(pre);
	ans.push_back(post);

	for (int i = 0; i < size; i++) {
		cout << pre[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < size; i++) {
		cout << post[i] << " ";
	}

	return ans;
}

int main() {
	vector<vector<int>> nodeinfo;
	int n; cin >> n;
	for (int i = 0; i < n; i++) {
		int a, b; cin >> a >> b;
		vector<int> t;
		t.push_back(a);
		t.push_back(b);
		nodeinfo.push_back(t);
	}
	solution(nodeinfo);
}