#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#define pii pair<int,int>
#define ppii pair<pii, pii>
using namespace std;
vector<vector<int>> b(100);
map<ppii, int> ma;
queue<ppii> q;
int n;
int dx[] = { 0,1,0,-1 };
int dy[] = { 1,0,-1,0 };
int visited[100][100];

void turn(ppii a) {
	int y1 = a.first.first, x1 = a.first.second;
	int y2 = a.second.first, x2 = a.second.second;
	if (y1 == y2) {
		if (y1 + 1 < n) {
			if (b[y1 + 1][x1] == 0 && b[y1 + 1][x2] == 0) {
				if (!ma[{ {y1, x1}, { y1 + 1,x1 }}]) {
					q.push({ {y1, x1}, {y1 + 1, x1} });
					ma[{ {y1, x1}, { y1 + 1,x1 }}] = 1;
				}
				if (!ma[{ {y1, x2}, { y1 + 1 ,x2 }}]) {
					q.push({ {y1, x2}, {y1 + 1, x2} });
					ma[{ {y1, x2}, { y1 + 1 ,x2 }}] = 1;
				}
				
			}
		}
		if (y1 - 1 >= 0) {
			if (b[y1 - 1][x1] == 0 && b[y1 - 1][x2] == 0) {
				if (!ma[{ {y1 - 1, x1}, { y1,x1 }}]) {
					q.push({ { y1 - 1, x1 }, { y1, x1 } });
					ma[{ {y1 - 1, x1}, { y1,x1 }}] = 1;
				}
				if (!ma[{ {y1 - 1, x2}, { y1,x2 }}]) {
					q.push({ { y1 - 1, x2 }, { y1, x2 } });
					ma[{ {y1 - 1, x2}, { y1,x2 }}] = 1;
				}
			}
		}
	}
	else {
		if (x1 + 1 < n) {
			if (b[y1][x1 + 1] == 0 && b[y2][x1 + 1] == 0) {
				if (!ma[{ {y1, x1}, { y1,x1 + 1 }}]) {
					q.push({ {y1, x1}, {y1, x1 + 1} });
					ma[{ {y1, x1}, { y1,x1 + 1 }}] = 1;
				}
				if (!ma[{ {y1, x1}, { y2,x1 + 1 }}]) {
					q.push({ {y2, x1}, {y2, x1 + 1} });
					ma[{ {y1, x1}, { y2,x1 + 1 }}] = 1;
				}
			}
		}
		if (x1 - 1 >= 0) {
			if (b[y1][x1 - 1] == 0 && b[y2][x1 - 1] == 0) {
				if (!ma[{ {y1, x1 - 1}, { y1, x1 }}]) {
					q.push({ {y1, x1 - 1}, {y1, x1} });
					ma[{ {y1, x1 - 1}, { y1, x1 }}] = 1;
				}
				if (!ma[{ {y2, x1 - 1}, { y2,x1 }}]) {
					q.push({ { y2, x1 - 1 }, { y2,x1 } });
					ma[{ {y2, x1 - 1}, { y2,x1 }}] = 1;
				}
			}
		}
	}
}

int solution(vector<vector<int>> board) {
	b = board;
	//n = board.size();
	q.push({ { 0,0 }, { 0,1 } });
	ma[{ {0, 0}, { 0,1 }}] = 1;
	int ret = 0, cnt = 0;
	while (q.size()) {
		int t = q.size();
		while (t--) {
			ppii cur = q.front();
			q.pop();
			if (cur.first == pii(n - 1, n - 1) || cur.second == pii(n - 1, n - 1)) return ret;
			
			turn(cur);
			for (int i = 0; i < 4; i++) {
				int y1 = cur.first.first + dy[i], x1 = cur.first.second + dx[i];
				int y2 = cur.second.first + dy[i], x2 = cur.second.second + dx[i];
				if (y1 >= 0 && y2 >= 0 && x1 >= 0 && x2 >= 0 && y1 < n && y2 < n && x1 < n && x2 < n) {
					if (!ma[{ {y1, x1}, { y2,x2 }}] && b[y1][x1] == 0 && b[y2][x2] == 0) {
						q.push({ {y1, x1}, { y2,x2 } });
						ma[{ {y1, x1}, { y2,x2 }}] = 1;
					}
				}
			}
		}
		ret++;
	}
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			int a; cin >> a;
			b[i].push_back(a);
		}
	}
	cout << solution(b);
}