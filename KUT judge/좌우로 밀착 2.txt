#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int arr[1000][1000], t[1000][1000], t1[1000][1000], t2[1000][1000];
int move(int d, int r, int c, int(*a)[1000]) {
	int n = 0;

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) t[i][j] = 0;
	}

	if (d == 0) { //╩С
		for (int i = 0; i < c; i++) {
			int idx = 0;
			for (int j = 0; j < r; j++) {
				if (a[j][i]) {
					t[idx][i] = a[j][i];
					n += j - idx;
					idx++;
				}
			}
		}
	}
	else if (d == 1) { //го
		for (int i = c - 1; i >= 0; i--) {
			int idx = r - 1;
			for (int j = r - 1; j >= 0; j--) {
				if (a[j][i]) {
					t[idx][i] = a[j][i];
					n += idx - j;
					idx--;
				}
			}
		}
	}
	else if (d == 2) { //аб
		for (int i = 0; i < r; i++) {
			int idx = 0;
			for (int j = 0; j < c; j++) {
				if (a[i][j]) {
					t[i][idx] = a[i][j];
					n += j - idx;
					idx++;
				}
			}
		}
	}
	else { //©Л
		for (int i = r - 1; i >= 0; i--) {
			int idx = c - 1;
			for (int j = c - 1; j >= 0; j--) {
				if (a[i][j]) {
					t[i][idx] = a[i][j];
					n += idx - j;
					idx--;
				}
			}
		}
	}
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) a[i][j] = t[i][j];
	}

	return n;
}
int main() {
	int t; cin >> t;
	while (t--) {
		int r, c;
		cin >> r >> c;
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) cin >> arr[i][j];
		}
		int min = 999999999;
		for (int i = 0; i < 4; i++) {
			int t = 0;
			copy(&arr[0][0], &arr[0][0] + 1000 * 1000, &t1[0][0]);
			int temp = move(i, r, c, t1);
			t += temp;

			for (int j = 0; j < 4; j++) {
				if (i == j) continue;
				copy(&t1[0][0], &t1[0][0] + 1000 * 1000, &t2[0][0]);
				int temp2 = move(j, r, c, t2);

				t += temp2;
				if (t < min) min = t;
				t -= temp2;
			}
			t -= temp;
			
		}
		cout << min << '\n';
	}
}