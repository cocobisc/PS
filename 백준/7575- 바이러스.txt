#include <bits/stdc++.h>
using namespace std;

vector<int> v[100];
int fail[1000];
int N, K;

void getfail(int x) {
	for (int i = x + 1, j = x; i < x + K; i++) {
		while (j > x && v[0][i] != v[0][j]) j = fail[j - 1];
		if (v[0][i] == v[0][j]) fail[i] = ++j;
	}
}

bool comp(int x, int idx) {
	for (int i = 0, j = x; i < v[idx].size(); i++) {
		while (j > x && v[idx][i] != v[0][j]) j = fail[j - 1];
		if (v[idx][i] == v[0][j]) {
			if (j == x + K - 1) return true;
			j++;
		}
	}
	for (int i = v[idx].size() - 1, j = x; i >= 0; i--) {
		while (j > x && v[idx][i] != v[0][j]) j = fail[j - 1];
		if (v[idx][i] == v[0][j]) {
			if (j == x + K - 1) return true;
			j++;
		}
	}
	return false;
}

int main() {
	cin >> N >> K;
	for (int i = 0; i < N; i++) {
		int a, m; cin >> m;
		for (int j = 0; j < m; j++) {
			cin >> a;
			v[i].push_back(a);
		}
	}

	bool flag;
	for (int k = 0; k <= v[0].size() - K; k++) {
		memset(fail, 0, 4000);
		getfail(k);

		flag = true;
		for (int i = 1; i < N; i++) {
			if (!comp(k, i)) {
				flag = false; break;
			}
		}
		if (flag) break;
	}
	cout << (flag ? "YES" : "NO");

	return 0;
}
