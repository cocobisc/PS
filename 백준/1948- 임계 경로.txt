#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
const int MAX = 10001;
vector<pii> adj[MAX], radj[MAX];
int indegree[MAX], cost[MAX], visited[MAX];

int main() {
	int N, M; cin >> N >> M;
	for (int i = 0; i < M; i++) {
		int u, v, w; cin >> u >> v >> w;
		adj[u].push_back({ v, w });
		radj[v].push_back({ u, w });
		indegree[v]++;
	}
	int s, e; cin >> s >> e;

	queue<int> q;
	for (int i = 0; i < N; i++) {
		if (!indegree[i]) q.push(i);
	}
	for (int i = 0; i < N; i++) {
		int curr = q.front();
		q.pop();

		for (auto next : adj[curr]) {
			cost[next.first] = max(cost[next.first], cost[curr] + next.second);
			if (!--indegree[next.first]) q.push(next.first);
		}
	}

	q.pop();
	int cnt = 0;
	q.push(e);
	while (q.size()) {
		int curr = q.front();
		q.pop();
		if (visited[curr]) continue;
		visited[curr] = 1;
		for (auto next : radj[curr]) {
			if (cost[next.first] == cost[curr] - next.second) {
				q.push(next.first);
				cnt++;
			}
		}
	}
	cout << cost[N] << '\n' << cnt;

	return 0;
}