#include <bits/stdc++.h>
using namespace std;

int power[10], ans[10];
int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };
char arr[1000][1000];
typedef struct {
	int x, y, cnt;
}loc;
queue<loc> q[10];

int main() {
	int n, m, p; cin >> n >> m >> p;
	for (int i = 1; i <= p; i++) cin >> power[i];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
			if (arr[i][j] != '.' && arr[i][j] != '#') {
				q[arr[i][j] - '0'].push({ j,i,power[arr[i][j] - '0'] });
			}
		}
	}
	while (1) {
		int flag = 0;
		for (int i = 1; i <= p; i++) {
			if (q[i].size()) {
				flag = 1; break;
			}
		}
		if (!flag) break;
		for (int i = 1; i <= p; i++) {
			queue<loc> temp;
			while(q[i].size()) {
				loc curr = q[i].front(); q[i].pop();
				if (!curr.cnt) {
					curr.cnt = power[i];
					temp.push(curr);
					continue;
				}
				for (int j = 0; j < 4; j++) {
					int nx = curr.x + dx[j], ny = curr.y + dy[j], cnt = curr.cnt;
					if (nx >= 0 && ny >= 0 && nx < m && ny < n) {
						if (arr[ny][nx] == '.') {
							q[i].push({ nx,ny,cnt - 1 });
							arr[ny][nx] = i + '0';
						}
					}
				}
			}
			while (temp.size()) q[i].push(temp.front()), temp.pop();
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] != '.' && arr[i][j] != '#') 
				ans[arr[i][j] - '0']++;
		}
	}
	for (int i = 1; i <= p; i++) cout << ans[i] << " ";

	return 0;
}