#include <iostream>
#include <vector>
#include <queue>
using namespace std;
char map[1000][1000];
int dx[] = { 0,1,0,-1 };
int dy[] = { 1,0,-1,0 };
int visited[1000][1000];

struct loc {
	int x, y, type;
};

int main() {
	int r, c; cin >> r >> c;
	loc sp, ep;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			cin >> map[i][j];
			if (map[i][j] == 'J') sp.x = j, sp.y = i;
		}
	}
	queue<loc> q;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (map[i][j] == 'F') q.push({ j,i,2 });
		}
	}
	visited[sp.y][sp.x] = 1;
	q.push({ sp.x,sp.y,1 });
	int ret = 0;
	while (q.size()) {
		int t = q.size();
		while (t--) {
			loc cur = q.front();
			q.pop();
			if ((cur.x == 0 || cur.y == 0 || cur.x == c - 1 || cur.y == r - 1) && cur.type == 1) 
				return cout << ret + 1, 0;

			for (int i = 0; i < 4; i++) {
				int nx = cur.x + dx[i], ny = cur.y + dy[i];
				if (nx >= 0 && ny >= 0 && nx < c && ny < r && !visited[ny][nx] && map[ny][nx] == '.') {
					if (cur.type == 1) q.push({ nx,ny,1 });
					else q.push({ nx,ny,2 });
					visited[ny][nx] = 1;
				}
			}
		}
		ret++;
	}
	cout << "IMPOSSIBLE";
}