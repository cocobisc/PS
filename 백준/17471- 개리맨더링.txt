#include <bits/stdc++.h>
using namespace std;
vector<int> adj[11];
int people[11], visited[11], n, sum;
int parent[11];

int find(int x) {
	if (parent[x] == x || parent[x] == -1) return x;
	return parent[x] = find(parent[x]);
}

void uni(int a, int b) {
	a = find(a);
	b = find(b);
	if (a == b) return;
	parent[b] = a;
}

bool check_connect(vector<int> &list, int type) {
	for (int i = 0; i < list.size(); i++) {
		for (int j = i + 1; j < list.size(); j++) {
			for (int k : adj[list[i]]) {
				if (k == list[j]) uni(list[i], list[j]);
			}
		}
	}
	int comp = -1;
	for (int i = 1; i <= n; i++) {
		if (visited[i] == type) {
			if (comp == -1) comp = find(i);
			else if (comp != find(i)) return false;
		}
	}
	return true;
}

int BT(int cnt) {
	int mi = 2e9;
	vector<int> v(n);

	for (int i = 0; i < cnt; i++) v[i] = 1;

	do {
		int sum1 = 0, sum2 = 0;
		memset(parent, -1, sizeof(parent));
		memset(visited, 0, sizeof(visited));
		vector<int> list, list2;

		for (int i = 0; i < n; i++) {
			if (v[i] == 1) {
				visited[i + 1] = 1;
				list.push_back(i + 1);
			}
			else list2.push_back(i + 1);
		}

		if (check_connect(list2, 0) && check_connect(list, 1)) {
			for (int i = 1; i <= n; i++) {
				if (visited[i] == 1) sum1 += people[i];
				else sum2 += people[i];
			}
			mi = min(mi, abs(sum1 - sum2));
		}
	} while (prev_permutation(v.begin(), v.end()));

	return mi;
}

int main() {
	cin >> n;
	for (int i = 1; i <= n; i++) 
		cin >> people[i];
	
	for (int i = 1; i <= n; i++) {
		int t; cin >> t;
		for (int j = 0; j < t; j++) {
			int a; cin >> a;
			adj[i].push_back(a);
		}
		if(adj[i].size()) sort(adj[i].begin(), adj[i].end());
	}
	int ans = 2e9;
	for (int i = 1; i <= n / 2; i++) {
		ans = min(ans, BT(i));
	}
	cout << (ans == (int)2e9 ? -1 : ans);
}