#include <bits/stdc++.h>
using namespace std;
const int MAX = 1e5 + 1, MAH = 18;
vector<int> adj[MAX];
int level[MAX], parent[MAX][MAH];

void makeTreeByDFS(int curr) {
	for (auto next : adj[curr]) {
		if (level[next] == -1) {
			level[next] = level[curr] + 1;
			parent[next][0] = curr;
			makeTreeByDFS(next);
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	int n; cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int u, v; cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	memset(parent, -1, sizeof(parent));
	memset(level, -1, sizeof(level));
	level[1] = 0;
	makeTreeByDFS(1);

	for (int k = 1; k < MAH; k++) {
		for (int i = 1; i <= n; i++) {
			if(parent[i][k-1] != -1)
				parent[i][k] = parent[parent[i][k - 1]][k - 1];
		}
	}

	int m; cin >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		if (level[u] < level[v]) swap(u, v);
		int diff = level[u] - level[v];

		for (int j = 0; diff; j++) {
			if (diff % 2) u = parent[u][j];
			diff /= 2;
		}
		if (u != v) {
			for (int j = MAH - 1; j >= 0; j--) {
				if (parent[u][j] != -1 && parent[u][j] != parent[v][j]) {
					u = parent[u][j];
					v = parent[v][j];
				}
			}
			u = parent[u][0];
		}
		cout << u << '\n';
	}
}