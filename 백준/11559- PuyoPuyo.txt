#include <iostream>
#include <vector>
#include <queue>
using namespace std;
char ma[12][6];
int ans;
int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };
int flag;

void move() {
	for (int j = 0; j < 6; j++) {
		int k = -1;
		for (int i = 15; i >= 0; i--) {
			if (ma[i][j] == '.' && k == -1) k = i;
			if (ma[i][j] != '.' && k != -1) {
				swap(ma[i][j], ma[k--][j]);
			}
		}
	}
}

void bfs(int x, int y) {
	int visited[12][6] = { 0 };
	int cnt = 1;
	queue<pair<int, int>> q;
	char c = ma[y][x];

	q.push({ x,y });
	visited[y][x] = 1;

	while (q.size()) {
		pair<int, int> cur = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = cur.first + dx[i], ny = cur.second + dy[i];
			if (nx >= 0 && ny >= 0 && nx < 6 && ny < 12 && ma[ny][nx] == c && !visited[ny][nx]) {
				visited[ny][nx] = 1;
				q.push({ nx,ny });
				cnt++;
			}
		}
	}
	if (cnt > 3) {
		for (int i = 0; i < 12; i++) {
			for (int j = 0; j < 6; j++) if (visited[i][j]) ma[i][j] = '.';
		}
		flag = 1;
	}
}

int main() {
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) cin >> ma[i][j];
	}
	while (1) {
		for (int i = 0; i < 12; i++) {
			for (int j = 0; j < 6; j++) {
				if (ma[i][j] != '.') bfs(j, i);
			}
		}
		if (!flag) break;
		ans++;
		move();
		flag = 0;
	}
	cout << ans;
}