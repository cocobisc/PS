#include <bits/stdc++.h>
using namespace std;

typedef pair<double, double> pdd;
typedef pair<int, int> pii;

vector<pdd> v;
vector<pair<double, pii>> adj;
int p[100];
double ans;

double getDist(double &x1, double &y1, double &x2, double &y2) {
	return sqrt(pow(y2 - y1, 2) + pow(x2 - x1, 2));
}

int find(int x) {
	if (p[x] == -1) return x;
	return p[x] = find(p[x]);
}

bool uni(int a, int b) {
	a = find(a);
	b = find(b);
	if (a == b) return 0;
	p[b] = a;
	return 1;
}

int main() {
	memset(p, -1, sizeof(p));
	int n; cin >> n;

	for (int i = 0; i < n; i++) {
		double a, b; cin >> a >> b;
		v.push_back({ a,b });
	}
	if (n == 1) return cout << 0, 0;
	for (int i = 0; i < n; i++) {
		double x1, y1; tie(x1, y1) = v[i];
		for (int j = i + 1; j < n; j++) {
			double x2, y2; tie(x2, y2) = v[j];
			double dist = getDist(x1, y1, x2, y2);

			adj.push_back({ dist,{i,j} });
		}
	}
	sort(adj.begin(), adj.end());
	for (int i = 0; i < adj.size(); i++) {
		double dist;
		pii node; tie(dist, node) = adj[i];
		int a, b; tie(a, b) = node;

		if (uni(a, b)) ans += dist;
	}

	cout << fixed;
	cout.precision(3);
	cout << ans;
}