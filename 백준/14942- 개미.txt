#include <bits/stdc++.h>
using namespace std;
vector<int> v;
const int MAX = 1e5 + 1, HT = 18;
int par[MAX][HT], cost[MAX][HT];
vector<pair<int, int>> graph[MAX];

void dfs(int x, int p, int w) {
	par[x][0] = p;
	cost[x][0] = w;
	for (auto next : graph[x]) {
		if (next.first == p) continue;
		dfs(next.first, x, next.second);
	}
}

int main() {
	int n; cin >> n;
	v.resize(n + 1);
	for (int i = 1; i <= n; i++) cin >> v[i];
	for (int i = 0; i < n - 1; i++) {
		int a, b, c; cin >> a >> b >> c;
		graph[a].push_back({ b,c });
		graph[b].push_back({ a,c });
	}
	dfs(1, 0, 0);

	for (int k = 1; k < HT; k++) {
		for (int i = 2; i <= n; i++) {
			par[i][k] = par[par[i][k - 1]][k - 1];
			if(par[i][k]) 
				cost[i][k] = cost[i][k - 1] + cost[par[i][k - 1]][k - 1];
		}
	}
	cout << 1 << '\n';
	for (int i = 2; i <= n; i++) {
		int room = i, t = v[i];
		for (int j = HT - 1; j >= 0; j--) {
			if (par[room][j] && cost[room][j] <= t) {
				t -= cost[room][j];
				room = par[room][j];
			}
		}
		cout << room << '\n';
	}
}