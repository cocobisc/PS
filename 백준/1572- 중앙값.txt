#include <bits/stdc++.h>
using namespace std;
const int MAXN = 25e4 + 1;
int arr[MAXN];


void update(vector<int> &tree, int start, int end, int node, int idx, int val) {
	if (idx < start || end < idx) return;
	if (start == end) {
		tree[node] += val;
		return;
	}
	update(tree, start, start + end >> 1, node * 2, idx, val);
	update(tree, (start + end >> 1) + 1, end, node * 2 + 1, idx, val);
	tree[node] = tree[node * 2] + tree[node * 2 + 1];
}

int kth(vector<int> &tree, int start, int end, int node, int k) {
	if (start == end) return start;
	if (tree[node * 2] >= k) return kth(tree, start, start + end >> 1, node * 2, k);
	else return kth(tree, (start + end >> 1) + 1, end, node * 2 + 1, k - tree[node * 2]);
}

int main() {
	int h = (int)ceil(log2(MAXN));
	int tree_size = (1 << (h + 1));
	vector<int> tree(tree_size, 0);
	int n, k; cin >> n >> k;
	int cnt = (k + 1) / 2;
	long long ans = 0;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
		update(tree, 0, MAXN, 1, arr[i], 1);
		if (i >= k - 1) {
			ans += kth(tree, 0, MAXN, 1, cnt);
			update(tree, 0, MAXN, 1, arr[i - k + 1], -1);
		}
	}
	cout << ans;
}