#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1e5;

int checkType(int val) {
	if (val > 0) return 1;
	else if (val < 0) return -1;
	else return 0;
}

int result(vector<int> &tree, int s, int e, int node, int ns, int ne) {
	if (e < ns || ne < s) return 1;
	if (s <= ns && ne <= e) return tree[node];
	int mid = ns + ne >> 1;
	return result(tree, s, e, node * 2, ns, mid) * result(tree, s, e, node * 2 + 1, mid + 1, ne);
}

void update(vector<int> &tree, int idx, int val) {
	tree[idx] = val;
	while (idx > 1) {
		idx /= 2;
		tree[idx] = tree[idx * 2] * tree[idx * 2 + 1];
	}
}

void construct(vector<int> &tree, int n) {
	for (int i = n - 1; i > 0; i--) {
		tree[i] = tree[i * 2] * tree[i * 2 + 1];
	}
}

int main(void) {
	char list[] = { '-','0','+' };
	int n, k;
	while (cin >> n >> k) {
		int h = ceil(log2(n));
		int tree_size = 1 << h;
		vector<int> tree(tree_size * 2, 1);

		for (int i = tree_size; i < tree_size + n; i++) {
			int a; cin >> a;
			tree[i] = checkType(a);
		}
		construct(tree, tree_size);

		string ans;
		for (int i = 0; i < k; i++) {
			char op;
			int a, b;
			cin >> op >> a >> b;
			if (op == 'C') update(tree, a + tree_size - 1, checkType(b));
			else {
				int type = result(tree, a, b, 1, 1, tree_size);
				ans += list[type + 1];
				cout << ans.back() << endl;
			}
		}
		cout << ans << '\n';
	}
}
