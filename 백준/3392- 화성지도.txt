#include <bits/stdc++.h>
using namespace std;
const int MAXY = 3e4, MAXN = 1e4;

struct Line {
	int x, y1, y2, z;
};

void update(vector<int> &tree, int *count, int s, int e, int node, int ns, int ne, int val) {
	if (e < ns || ne < s) return;
	if (s <= ns && ne <= e) count[node] += val;
	else {
		int mid = ns + ne >> 1;
		update(tree, count, s, e, node * 2, ns, mid, val);
		update(tree, count, s, e, node * 2 + 1, mid + 1, ne, val);
	}
	if (count[node]) tree[node] = ne - ns + 1;
	else {
		if (ns == ne) tree[node] = 0;
		else tree[node] = tree[node * 2] + tree[node * 2 + 1];
	}
}

int main(void) {
	int h = log2(MAXY);
	int tree_size = 1 << (h + 1);
	vector<int> tree(tree_size * 2, 0);
	vector<Line> line;
	int *count = new int[tree_size * 2] {0};

	int n; cin >> n;
	for (int i = 0; i < n; i++) {
		int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;
		line.push_back({ x1,y1,y2 - 1,1 });
		line.push_back({ x2,y1,y2 - 1,-1 });
	}
	sort(line.begin(), line.end(), [](const Line &a, const Line &b) {
		return a.x < b.x;
	});

	int sx, ans = 0;
	for (int i = 0; i < 2 * n; i++) {
		if (i) {
			int dx = line[i].x - sx;
			ans += dx * tree[1];
		}
		update(tree, count, line[i].y1, line[i].y2, 1, 0, MAXY, line[i].z);
		sx = line[i].x;
	}
	cout << ans;

	return 0;
}
