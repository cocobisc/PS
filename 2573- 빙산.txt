#include <bits/stdc++.h>
using namespace std;

int arr[300][300];
int check[300][300];
int r, c;
int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };
int visited[300][300];

bool isbound(int &x, int &y) {
	return x >= 0 && y >= 0 && x < c && y < r;
}

void bfs(int(*visited)[300], int x, int y) {
	queue<pair<int, int>> q;
	visited[y][x] = 1;
	q.push({ x,y });

	while (q.size()) {
		tie(x, y) = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i], ny = y + dy[i];
			if (isbound(nx, ny) && !visited[ny][nx] && arr[ny][nx]) {
				q.push({ nx,ny });
				visited[ny][nx] = 1;
			}
		}
		arr[y][x] -= check[y][x];
		if (arr[y][x] < 0) arr[y][x] = 0;
	}
}

void checkForMelting() {
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			int cnt = 0;
			if (arr[i][j]) {
				for (int k = 0; k < 4; k++) {
					int nx = j + dx[k], ny = i + dy[k];
					if (isbound(nx, ny) && arr[ny][nx] == 0) cnt++;
				}
				check[i][j] = cnt;
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	cin >> r >> c;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) cin >> arr[i][j];
	}

	int ans = 0;
	int flag = 0;

	while (1) {
		int cnt = 0;
		int visited[300][300] = { 0 };

		checkForMelting();
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (!visited[i][j] && arr[i][j]) {
					bfs(visited, j, i), cnt++;
				}
			}
		}
		if (!cnt) break;

		if (cnt > 1) {
			flag = 1; break;
		}
		ans++;
	}
	cout << (flag ? ans : 0);
}