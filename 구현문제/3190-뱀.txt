#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
queue<pair<int, int>> body;
queue<pair<int, char>> command;
int n, m;
bool isbound(int x, int y) {
	if (x >= 1 && y >= 1 && x <= n && y <= n) return 1;
	return 0;
}
bool istouch_body(int x, int y) {
	int cnt = (int)body.size();
	while(cnt--) {
		pair<int, int> cur = body.front();
		body.pop();
		if (cur.second == x && cur.first == y) return 1;
		else body.push(cur);
	}
	return 0;
}
int main() {
	cin >> n >> m;
	map<pair<int,int>, int> ma;
	for (int i = 0; i < m; i++) {
		int r, c;
		cin >> r >> c;
		ma[{r, c}] = 1;
	}
	int l; cin >> l;
	for (int i = 0; i < l; i++) {
		int sec;
		char c;
		cin >> sec >> c;
		command.push({ sec,c });
	}
	int x = 1, y = 1;
	int dir = 3, time = 0;
	body.push({ 1,1 });
	while (1) {
		if (dir == 0) y -= 1;	
		else if (dir == 1) x -= 1;
		else if (dir == 2) y += 1;
		else if (dir == 3) x += 1;

		time++;
		if (!isbound(x, y) || istouch_body(x, y)) break;

		body.push({ y,x });
		if (ma[{y, x}] == 1) ma[{y, x}] = 0;
		else body.pop();

		if (!command.empty() && time == command.front().first) {
			if (command.front().second == 'L') dir += 1;
			else dir -= 1;
			if (dir < 0) dir = 3;
			dir %= 4;
			command.pop();
		}
	}
	cout << time;
}